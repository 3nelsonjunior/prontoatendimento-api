// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProntoAtendimento.Repository.Context;

namespace ProntoAtendimento.Repository.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20200804021125_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Ativo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CriticidadeAtivo")
                        .HasColumnName("Criticidade")
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataHoraCadastro")
                        .HasColumnName("Data_Hora_Cadastro");

                    b.Property<DateTime>("DataHoraUltimaAtualizacao")
                        .HasColumnName("Data_Hora_Ultima_Atualizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao")
                        .HasMaxLength(6000);

                    b.Property<int>("IncAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inc_Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasMaxLength(480);

                    b.Property<Guid?>("SetorId")
                        .IsRequired()
                        .HasColumnName("Setor_Id");

                    b.Property<int>("StatusAtivo")
                        .HasColumnName("Status_Ativo");

                    b.HasKey("Id");

                    b.HasAlternateKey("IncAtivo")
                        .HasName("Inc_Ativo");

                    b.HasIndex("SetorId");

                    b.ToTable("Ativo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c2b2734-ea6b-4c00-afc1-75f06de09eee"),
                            CriticidadeAtivo = 0,
                            DataHoraCadastro = new DateTime(2020, 8, 3, 23, 11, 25, 421, DateTimeKind.Local).AddTicks(8),
                            DataHoraUltimaAtualizacao = new DateTime(2020, 8, 3, 23, 11, 25, 421, DateTimeKind.Local).AddTicks(8335),
                            Descricao = "PADRAO",
                            IncAtivo = 1000,
                            Nome = "PADRAO",
                            SetorId = new Guid("dd84e876-d3d7-418b-85e0-5aee403a2ceb"),
                            StatusAtivo = 1
                        });
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Ocorrencia", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Acionamento")
                        .HasColumnName("Acionamento");

                    b.Property<string>("ChamadoFornecedor")
                        .HasColumnName("Chamado_Fornecedor")
                        .HasMaxLength(60);

                    b.Property<string>("ChamadoTI")
                        .HasColumnName("Chamado_TI")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("DataHoraFim")
                        .HasColumnName("Data_Hora_Fim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnName("Data_Hora_Inicio")
                        .HasMaxLength(120);

                    b.Property<DateTime>("DataHoraUltimaAtualizacao")
                        .HasColumnName("Data_Hora_Ultima_Atualizacao");

                    b.Property<string>("DescricaoImpacto")
                        .HasColumnName("Descricao_Impacto")
                        .HasMaxLength(3600);

                    b.Property<bool>("Impacto")
                        .HasColumnName("Impacto");

                    b.Property<int>("IncOcorrencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inc_Ocorrencia");

                    b.Property<string>("OcorrenciaCCM")
                        .HasColumnName("Ocorrencia_CCM")
                        .HasMaxLength(30);

                    b.Property<int>("StatusAtualOcorrencia")
                        .HasColumnName("Status_Atual_Ocorrencia")
                        .HasMaxLength(1);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnName("Titulo")
                        .HasMaxLength(300);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasAlternateKey("IncOcorrencia")
                        .HasName("Inc_Ocorrencia");

                    b.ToTable("Ocorrencia");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.OcorrenciaAtivo", b =>
                {
                    b.Property<Guid>("OcorrenciaId")
                        .HasColumnName("Ocorrencia_Id");

                    b.Property<Guid>("AtivoId")
                        .HasColumnName("Ativo_Id");

                    b.Property<bool>("Principal")
                        .HasColumnName("Principal");

                    b.HasKey("OcorrenciaId", "AtivoId");

                    b.HasIndex("AtivoId");

                    b.ToTable("Ocorrencia_Ativo");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Perfil");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c32b2335-2166-4342-a7cb-ad37c47b9b02"),
                            ConcurrencyStamp = "c3c72eb9-d231-456e-af6a-66e5f4a33a61",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a1ba9685-8860-46d6-b6e5-a72ce3965970"),
                            ConcurrencyStamp = "276664af-d3eb-410c-bffd-d560382bd1ed",
                            Name = "ADMIN_TI",
                            NormalizedName = "ADMIN_TI"
                        },
                        new
                        {
                            Id = new Guid("8205cf8b-fb97-449d-8810-69cbfa1dacf7"),
                            ConcurrencyStamp = "ab42ff38-0ecf-4674-8bde-4782b0d855c5",
                            Name = "CONSULTA",
                            NormalizedName = "CONSULTA"
                        },
                        new
                        {
                            Id = new Guid("d289114a-f651-43a7-956b-feebbd6d85cc"),
                            ConcurrencyStamp = "e6e24243-9498-4a9b-800a-03acb5989d05",
                            Name = "DEV",
                            NormalizedName = "DEV"
                        },
                        new
                        {
                            Id = new Guid("fedf42c6-7c71-4b96-83eb-05ceaa7a6bbc"),
                            ConcurrencyStamp = "84e9069f-78cc-468b-8107-997f243df17c",
                            Name = "PA",
                            NormalizedName = "PA"
                        },
                        new
                        {
                            Id = new Guid("0cc9ce69-e164-4435-9e96-b59877366973"),
                            ConcurrencyStamp = "66181dee-3d39-4709-acba-d1d349f93cad",
                            Name = "TI",
                            NormalizedName = "TI"
                        });
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Setor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Coordenacao")
                        .IsRequired()
                        .HasColumnName("Coordenacao")
                        .HasMaxLength(480);

                    b.Property<int>("IncSetor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inc_Setor");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasMaxLength(480);

                    b.HasKey("Id");

                    b.HasAlternateKey("IncSetor")
                        .HasName("Inc_Setor");

                    b.ToTable("Setor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd84e876-d3d7-418b-85e0-5aee403a2ceb"),
                            Coordenacao = "PADRAO",
                            IncSetor = 1000,
                            Nome = "PADRAO"
                        });
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Tramite", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DataHora")
                        .HasColumnName("Data_Hora");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao")
                        .HasMaxLength(6000);

                    b.Property<int>("IncTramite")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inc_Tramite");

                    b.Property<Guid>("OcorrenciaId")
                        .HasColumnName("Ocorrencia_Id");

                    b.Property<bool>("Solucao")
                        .HasColumnName("Solucao");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasAlternateKey("IncTramite")
                        .HasName("Inc_Tramite");

                    b.ToTable("Tramite");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Turno", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnName("Data_Hora_Fim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnName("Data_Hora_Inicio")
                        .HasMaxLength(120);

                    b.Property<int?>("IncTurno")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inc_Turno");

                    b.Property<int>("StatusTurno")
                        .HasColumnName("Status_Turno")
                        .HasMaxLength(1);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasAlternateKey("IncTurno")
                        .HasName("Inc_Turno");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.TurnoOcorrencia", b =>
                {
                    b.Property<Guid>("TurnoId")
                        .HasColumnName("Turno_Id");

                    b.Property<Guid>("OcorrenciaId")
                        .HasColumnName("Ocorrencia_Id");

                    b.Property<int>("StatusTurnoOcorrencia")
                        .HasColumnName("Status_Turno_Ocorrencia")
                        .HasMaxLength(1);

                    b.HasKey("TurnoId", "OcorrenciaId");

                    b.HasIndex("OcorrenciaId");

                    b.ToTable("Turno_Ocorrencia");
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DataHoraCadastro")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusUsuario")
                        .HasColumnType("int(1)");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db8ca864-3473-4fa1-bfee-55440dd56ebf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c448bf97-ef06-4873-86e0-827f77c88e25",
                            DataHoraCadastro = new DateTime(2020, 8, 3, 23, 11, 25, 459, DateTimeKind.Local).AddTicks(2098),
                            Email = "grupo.operacao@mrs.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeCompleto = "ADMIN_I",
                            NormalizedEmail = "GRUPO.OPERACAO@MRS.COM.BR",
                            NormalizedUserName = "11111111",
                            PasswordHash = "AQAAAAEAACcQAAAAEN66dpM+Jr6hPmbzirMVrdjpjG1aHlIu6jmYz6ObBsiVKfGn55kylDtRd5umObHX/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94191e6e-f82e-47bf-8522-a8445b401183",
                            StatusUsuario = 1,
                            TwoFactorEnabled = false,
                            UserName = "11111111"
                        });
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.UsuarioPerfil", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioPerfil");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("db8ca864-3473-4fa1-bfee-55440dd56ebf"),
                            RoleId = new Guid("c32b2335-2166-4342-a7cb-ad37c47b9b02")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Perfil")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Ativo", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Setor", "Setor")
                        .WithMany("Ativos")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Ocorrencia", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario", "Usuario")
                        .WithMany("Ocorrencias")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.OcorrenciaAtivo", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Ativo", "Ativo")
                        .WithMany("OcorrenciaAtivos")
                        .HasForeignKey("AtivoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProntoAtendimento.Domain.Entity.Ocorrencia", "Ocorrencia")
                        .WithMany("OcorrenciaAtivos")
                        .HasForeignKey("OcorrenciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Tramite", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Ocorrencia", "Ocorrencia")
                        .WithMany("Tramites")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario", "Usuario")
                        .WithMany("Tramites")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.Turno", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario", "Usuario")
                        .WithMany("Turnos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.TurnoOcorrencia", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Ocorrencia", "Ocorrencia")
                        .WithMany("TurnoOcorrencias")
                        .HasForeignKey("OcorrenciaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProntoAtendimento.Domain.Entity.Turno", "Turno")
                        .WithMany("TurnoOcorrencias")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProntoAtendimento.Domain.Entity.UsuarioPerfil", b =>
                {
                    b.HasOne("ProntoAtendimento.Domain.Entity.Perfil", "Perfil")
                        .WithMany("ListaUsuarioPerfil")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProntoAtendimento.Domain.Entity.Usuario", "Usuario")
                        .WithMany("ListaUsuarioPerfil")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
